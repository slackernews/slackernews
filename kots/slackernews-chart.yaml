apiVersion: kots.io/v1beta2
kind: HelmChart
metadata:
  name: slackernews
spec:
  # chart identifies a matching chart from a .tgz
  chart:
    name: slackernews
    chartVersion: $VERSION

  # values are used in the customer environment, as a pre-render step
  # these values will be supplied to helm template
  values:
    postgres:
      enabled: true
      deploy_postgres: repl{{ ConfigOption "deploy_postgres" | ParseBool }}
    slack:
      botToken: repl{{ ConfigOption "slack_bot_token" | quote }}
      userToken: repl{{ ConfigOption "slack_user_token" | quote }}
      clientId: repl{{ ConfigOption "slack_clientid" | quote }}
      clientSecret: repl{{ ConfigOption "slack_clientsecret" | quote }}
    slackernews:
      domain: repl{{ ConfigOption "slackernews_domain" }}
      adminUserEmails: repl{{ ConfigOption "slackernews_admin_user_emails" | quote }}
    admin-console:
      enabled: false
    replicated:
      isEmbeddedCluster: repl{{ eq Distribution "embedded-cluster"}}
      isKOTSManaged: true
      imagePullSecrets:
        - name: '{{repl ImagePullSecretName }}'
      image:
        registry: '{{repl HasLocalRegistry | ternary LocalRegistryHost "$REGISTRY" }}'
        repository: '{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/index.docker.io/replicated" ) }}/replicated-sdk'
    service:
      tls:
        enabled: true
    nginx:
      enabled: true
      service:
        nodePort:
          port: 443
    images:
      pullSecrets:
        - name: '{{repl ImagePullSecretName }}'
      slackernews:
        registry: '{{repl HasLocalRegistry | ternary LocalRegistryHost "$REGISTRY" }}'
        repository: '{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/ghcr.io/$NAMESPACE" ) }}/slackernews-web'
      nginx:
        registry: '{{repl HasLocalRegistry | ternary LocalRegistryHost "$REGISTRY" }}'
        repository: '{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/index.docker.io/library" ) }}/nginx'
      postgres:
        registry: '{{repl HasLocalRegistry | ternary LocalRegistryHost "$REGISTRY" }}'
        repository: '{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/index.docker.io/library" ) }}/postgres'
  optionalValues:
    - when: '{{repl ConfigOptionEquals "deploy_postgres" "1"}}'
      recursiveMerge: true
      values:
        postgres:
          password: '{{repl ConfigOption "postgres_password" }}'

    - when: '{{repl ConfigOptionEquals "deploy_postgres" "0"}}'
      recursiveMerge: true
      values:
        postgres:
          uri: '{{repl ConfigOption "postgres_external_uri" }}'

    - when: '{{repl ConfigOptionEquals "service_type" "cluster_ip"}}'
      recursiveMerge: true
      values:
        nginx:
          service:
            type: ClusterIP

    - when: '{{repl ConfigOptionEquals "service_type" "load_balancer"}}'
      recursiveMerge: true
      values:
        nginx:
          service:
            type: LoadBalancer

    - when: '{{repl ConfigOptionEquals "service_type" "node_port"}}'
      recursiveMerge: true
      values:
        nginx:
          service:
            type: NodePort
            nodePort:
              port: repl{{ ConfigOption "node_port_port" }}

    - when: '{{repl ConfigOptionEquals "certificate_source" "upload_existing"}}'
      recursiveMerge: true
      values:
        service:
          tls:
            enabled: true
            cert: repl{{ ConfigOptionData "tls_cert" | nindent 14 }}
            key: repl{{ ConfigOptionData "tls_key" | nindent 14 }}
            ca: repl{{ ConfigOptionData "tls_ca" | nindent 14 }}

    - when: '{{repl ConfigOptionEquals "certificate_source" "generate_internal"}}'
      recursiveMerge: true
      values:
        service:
          tls:
            enabled: true
            ca: |-
              {{repl $ca := genCA (LicenseFieldValue "customerName") 365 }}
              {{repl $ca.Cert | Base64Encode}}
            cert: |-
              {{repl $cert := genSignedCert (ConfigOption "slackernews_domain") nil (list (ConfigOption "slackernews_domain")) 365 $ca }}
              {{repl $cert.Cert | nindent 14 }}
            key: |-
              {{repl $cert.Key | nindent 14 }}

    - when: '{{repl HasLocalRegistry }}'
      recursiveMerge: true
      values:
        replicated:
          isAirgap: true

  # builder values provide a way to render the chart with all images
  # and manifests. this is used in replicated to create airgap packages
  builder:
    postgres:
      password: this-is-not-used-but-needed-for-builder
      deploy_postgres: true
      enabled: true

    images:
      slackernews:
        registry: ghcr.io
        repository: $NAMESPACE/slackernews-web
      nginx:
        registry: index.docker.io
        repository: library/nginx
      postgres:
        registry: index.docker.io
        repository: library/postgres
    replicated:
      image:
        registry: index.docker.io
        repository: replicated/replicated-sdk
