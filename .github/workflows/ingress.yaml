name: cmx-test-with-ingress

on:
  workflow_dispatch:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
env:
  REGISTRY: ttl.sh

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      tags: ${{ steps.web-meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - uses: int128/docker-build-cache-config-action@v1
        id: cache
        with:
          image: ghcr.io/${{ github.repository }}/cache

      - name: Build web image
        uses: docker/build-push-action@v4
        with:
          context: ./slackernews
          tags: ttl.sh/slackernews/slackernews0.0.0-alpha.${{ steps.vars.outputs.sha_short }}:1h
          file: ./deploy/Dockerfile.web
          push: true
          cache-from: ${{ steps.cache.outputs.cache-from }}
          cache-to: ${{ steps.cache.outputs.cache-to }}

  chart:
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - uses: actions/checkout@v4

      - run: make chart

      - uses: azure/setup-helm@v1
        with:
          version: "3.9.0"
        id: install

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Update the values.yaml with the registry name
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: "chart/slackernews/values.yaml"
          find: "$REGISTRY"
          replace: "ttl.sh"
          regex: false
      - name: Update the values.yaml with the image path
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: "chart/slackernews/values.yaml"
          find: "$IMAGE"
          replace: "slackernews/slackernews0.0.0-alpha.${{ steps.vars.outputs.sha_short }}:1h"
          regex: false

      - id: package-helm-chart
        run: |
          cd chart/slackernews && \
          helm dep up --debug && \
          cd .. && \
          helm package \
            --app-version=0.0.0-alpha.${{ steps.vars.outputs.sha_short }} \
            --version=0.0.0-alpha.${{ steps.vars.outputs.sha_short }} \
            ./slackernews

      - id: upload-helm-chart-artifact
        uses: actions/upload-artifact@v2
        with:
          name: slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}.tgz
          path: chart/slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}.tgz

  compatibility-matrix:
    if: false ## disabled in favor of expose port and port forward
    needs:
      - chart
    strategy:
      fail-fast: false
      matrix:
        cluster:
          - { distribution: kind, version: v1.26 }
          - { distribution: kind, version: v1.27 }
          - { distribution: kind, version: v1.28 }
          - { distribution: kind, version: v1.29 }
          - { distribution: k3s, version: v1.26 }
          - { distribution: k3s, version: v1.27 }
          - { distribution: k3s, version: v1.28 }
          - { distribution: k3s, version: v1.29 }
          # - { distribution: openshift, version: v4.13.0-okd }
          - { distribution: eks, version: v1.26 }
          - { distribution: eks, version: v1.27 }
          - { distribution: eks, version: v1.28 }
          - { distribution: eks, version: v1.29 }
          - { distribution: gke, version: v1.26 }
          - { distribution: gke, version: v1.27 }
          - { distribution: gke, version: v1.28 }
          - { distribution: gke, version: v1.29 }
          - { distribution: aks, version: v1.29 }
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - id: download-helm-chart-artifact
        uses: actions/download-artifact@v2
        with:
          name: slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}.tgz
          path: chart/slackernews

      - uses: azure/setup-helm@v1
        with:
          version: "3.9.0"
        id: install-helm

      - id: create-cluster
        uses: replicatedhq/replicated-actions/create-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          kubernetes-distribution: ${{ matrix.cluster.distribution }}
          kubernetes-version: ${{ matrix.cluster.version }}
          ttl: 4h
          cluster-name: slackernews-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}-${{ steps.vars.outputs.sha_short }}

      - id: install-ngrok-ingress
        uses: replicatedhq/replicated-actions/helm-install@v1
        with:
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
          repo-name: ngrok
          repo-url: https://ngrok.github.io/kubernetes-ingress-controller
          chart: ngrok/kubernetes-ingress-controller
          name: "ngrok-ingress-controller"
          namespace: "ngrok-ingress-controller"
          helm-path: "helm"
          values: |
            credentials:
              authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
              apiKey: ${{ secrets.NGROK_API_KEY }}

      - name: extract slackernews chart
        run: |
          mkdir -p ./slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}
          cd ./slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}
          tar xzvf ../chart/slackernews/slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}.tgz

      - id: helm-install
        uses: replicatedhq/replicated-actions/helm-install@v1
        with:
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
          chart: ./slackernews-0.0.0-alpha.${{ steps.vars.outputs.sha_short }}/slackernews
          name: "slackernews"
          version: "alpha.0.0.0-${{ steps.vars.outputs.sha_short }}"
          namespace: "slackernews"
          helm-path: "helm"
          values: |
            replicated:
              integration:
                licenseID: ${{ secrets.REPLICATED_LICENSE_ID }}

      - name: save the kubeconfig as a tmp file, saving the filename as an output
        run: |
          mkdir -p ~/.kube
          echo "${{ steps.create-cluster.outputs.cluster-kubeconfig }}" > ~/.kube/config

      - name: wait for the slackernews pod to be running
        run: |
          kubectl wait --for=condition=Ready pod -l app=slackernews -n slackernews --timeout=300s

      - name: wait for the replicated pod to be running
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/replicated  -n slackernews --timeout=300s

      - name: print the list of pods in the slackernews namespace
        run: |
          kubectl get pods -n slackernews

      - name: Install Chainsaw
        uses: kyverno/chainsaw/.github/actions/install@v0.0.9
        with:
          release: v0.0.9

      - name: Test with Chainsaw
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          cd ./test/conformance && chainsaw test --test-dir ./

      - name: install an ngrok ingress for testing
        run: |
          sed -i "s/\$NGROK_HOST/slackernews-${{ steps.create-cluster.outputs.cluster-id }}.ngrok.app/g" ./test/ngrok-ingress.yaml
          kubectl apply -f ./test/ngrok-ingress.yaml

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: cd slackernews && yarn

      - name: Install Playwright Browsers
        run: cd slackernews && yarn playwright install --with-deps

      - name: Run Playwright tests on the ngrok endpoint
        run: |
          cd slackernews && NODE_ENV=test TEST_URL=https://slackernews-${{ steps.create-cluster.outputs.cluster-id }}.ngrok.app yarn playwright test

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: slackernews/playwright-report/
          retention-days: 30

      - id: delete-ingress
        if: always()
        run: kubectl delete -f ./test/ngrok-ingress.yaml

      - id: wait-for-ingress-delete
        if: always()
        run: kubectl  wait --for=delete ingress/slackernews -n slackernews --timeout=300s

      - id: delete-cluster
        if: always()
        uses: replicatedhq/replicated-actions/remove-cluster@v1
        with:
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}
          api-token: ${{ secrets.REPLICATED_TOKEN }}

      - id: install-ngrok
        if: always()
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz && \
          sudo tar xvzf ngrok-v3-stable-linux-amd64.tgz -C ./

      - id: delete-edge
        if: always()
        run: |
          EDGE_ID=$(./ngrok api edges https list --api-key ${{ secrets.NGROK_API_KEY }} 2>/dev/null \
                    | jq -r '.https_edges[] | select(.hostports[0] == "slackernews-${{ steps.create-cluster.outputs.cluster-id }}.ngrok.app:443").id')

          if [ -n "$EDGE_ID" ]; then
            ./ngrok api edges https delete --api-key ${{ secrets.NGROK_API_KEY }} $EDGE_ID
          else
            echo "No edges to delete."
          fi

      - id: delete-tunnel
        if: always()
        run: |
          DOMAIN_ID=$(./ngrok api reserved-domains list --api-key ${{ secrets.NGROK_API_KEY }} 2>/dev/null \
                    | jq -r '.reserved_domains[] | select(.domain == "slackernews-${{ steps.create-cluster.outputs.cluster-id }}.ngrok.app").id')

          if [ -n "$DOMAIN_ID" ]; then
            ./ngrok api reserved-domains delete --api-key ${{ secrets.NGROK_API_KEY }} $DOMAIN_ID
          else
            echo "No reserved domains to delete."
          fi
