# Use a specific version of node:alpine as the base image
FROM node:20-alpine AS base

# Install dependencies that might be necessary
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the lock file present
FROM base AS deps
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Build the application
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Uncomment to disable Next.js telemetry during build
# ENV NEXT_TELEMETRY_DISABLED 1

RUN --mount=type=cache,target=/app/.next/cache yarn build

# Set up the production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Uncomment to disable Next.js telemetry at runtime
# ENV NEXT_TELEMETRY_DISABLED 1

# Create a group and user for running the application
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Change ownership of the /app directory and its contents to nextjs
# This ensures nextjs user has write permissions in /app
RUN chown -R nextjs:nodejs /app

# Copy the necessary files from the builder stage
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Switch to the nextjs user
USER nextjs

EXPOSE 3000

# Set required environment variables
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Run the application
CMD ["node", "server.js"]
